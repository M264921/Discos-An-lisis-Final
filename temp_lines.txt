# ============================
# make_inventory_offline.ps1
# Genera inventario interactivo en local y opcionalmente publica en docs/.
# ============================

[CmdletBinding()]
param(
  [string[]]$Drives = @('H','I','J'),
  [string]$Output = 'inventario_interactivo_offline.html',
  [string]$DocsTarget,
  [switch]$Push,
  [string]$CommitMessage = 'chore(docs): actualizar inventario offline'
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function HtmlEnc {
  param([string]$Value)
  if (-not $Value) { return '' }
  return ($Value -replace '&','&amp;' -replace '<','&lt;' -replace '>','&gt;' -replace '"','&quot;')
}

$repoRoot = if ($PSCommandPath) { Split-Path -Parent $PSCommandPath } else { (Get-Location).Path }
Push-Location $repoRoot
try {
  $outputPath = if ([System.IO.Path]::IsPathRooted($Output)) { $Output } else { Join-Path $repoRoot $Output }
  $docsTargetPath = $null
  if ($DocsTarget) {
    $docsTargetPath = if ([System.IO.Path]::IsPathRooted($DocsTarget)) { $DocsTarget } else { Join-Path $repoRoot $DocsTarget }
    $docsDir = Split-Path -Parent $docsTargetPath
    if ($docsDir -and -not (Test-Path $docsDir)) {
      New-Item -ItemType Directory -Force -Path $docsDir | Out-Null
    }
  }

  $excludeRx = '\\(System Volume Information|\$Recycle\.Bin|FOUND\.\d{3}|_quarantine(_from_[A-Z]+|_quarantine)?|_quarantine)($|\\)'
  $files = [System.Collections.Generic.List[object]]::new()

  foreach ($drive in $Drives) {
    $root = '{0}:\' -f $drive
    if (-not (Test-Path $root)) {
      Write-Verbose "Unidad $drive no encontrada, se omite."
      continue
    }
    Write-Verbose "Explorando $drive ..."
    Get-ChildItem $root -Recurse -Force -File -ErrorAction SilentlyContinue |
      Where-Object { $_.FullName -notmatch $excludeRx } |
      ForEach-Object {
        $files.Add([pscustomobject]@{
          Drive     = $drive
          Folder    = $_.DirectoryName
          Name      = $_.Name
          Extension = ($_.Extension -replace '^$','(sin)')
          Size      = [int64]$_.Length
          MB        = [math]::Round($_.Length/1MB, 2)
          LastWrite = $_.LastWriteTime
          FullPath  = $_.FullName
        }) | Out-Null
      }
  }

  if (-not $files.Count) {
    Write-Warning 'No se encontraron archivos con el filtro actual.'
  }

  $summary = $files | Group-Object Drive | ForEach-Object {
    $sumBytes = ($_.Group | Measure-Object Size -Sum).Sum
    [pscustomobject]@{
      Drive = $_.Name
      Count = $_.Count
      GB    = [math]::Round($sumBytes / 1GB, 2)
    }
  } | Sort-Object Drive
  if (-not $summary) {
    $summary = @()
  }

  $fecha = Get-Date -Format 'yyyy-MM-dd HH:mm'
  $totalCount = ($summary | Measure-Object Count -Sum).Sum
  if (-not $totalCount) { $totalCount = 0 }
  $totalGB    = ($summary | Measure-Object GB -Sum).Sum
  if (-not $totalGB) { $totalGB = 0 }

  $head = @"
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="utf-8">
<title>Inventario Offline H/I/J</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
  :root{ --fg:#1f2937; --muted:#6b7280; --line:#e5e7eb; --bg:#fff; --chip:#f3f4f6; }
  body{ font-family: Segoe UI, Arial, sans-serif; color:var(--fg); background:var(--bg); margin:20px; }
  h1,h2{ margin:0 0 8px 0; }
  .muted{ color:var(--muted); font-size:12px; margin:6px 0 16px; }
  .chips{ display:flex; flex-wrap:wrap; gap:8px; margin:10px 0 16px; }
  .pill{ background:var(--chip); border:1px solid var(--line); border-radius:999px; padding:4px 10px; }
  .nowrap{ white-space:nowrap; }
  table{ width:100%; border-collapse:collapse; font-size:13px; }
  th,td{ border:1px solid var(--line); padding:6px 8px; vertical-align:top; }
  th{ background:#f9fafb; cursor:pointer; user-select:none; }
  code{ font-family: Consolas, Monaco, monospace; background:#f9fafb; padding:1px 3px; border-radius:4px; }
  .right{ text-align:right; }
  .path{ max-width:520px; }
  .sticky{ position:sticky; top:0; background:#f9fafb; z-index:1; }
  .controls{ display:flex; gap:8px; align-items:center; margin:12px 0; }
  input[type="text"]{ width:340px; padding:6px 8px; border:1px solid var(--line); border-radius:6px; }
  .btn{ padding:6px 10px; border:1px solid var(--line); background:#fff; border-radius:6px; cursor:pointer; }
  .btn:hover{ background:#f3f4f6; }
  .small{ font-size:12px; }
</style>
</head>
<body>
"@

  $intro = @"
<h1>Inventario H / I / J (offline)</h1>
<div class="muted">
Generado: $fecha. Sin dependencias externas (funciona con o sin Internet).<br>
Nota: el enlace a archivo real solo abre en local (file://), no desde GitHub Pages.
</div>
"@

  $chipParts = foreach ($item in $summary) {
    $formattedCount = [string]::Format('{0:n0}', $item.Count)
    $formattedGB = [string]::Format('{0:n2}', $item.GB)
    "<span class='pill nowrap'><b>$($item.Drive):</b> $formattedCount archivos - $formattedGB GB</span>"
  }

  $formattedTotalCount = [string]::Format('{0:n0}', $totalCount)
  $formattedTotalGB = [string]::Format('{0:n2}', $totalGB)
  $chips = '<div class="chips">'
  if ($chipParts) {
    $chips += ($chipParts -join ' ') + ' '
  }
  $chips += "<span class='pill nowrap'><b>TOTAL:</b> $formattedTotalCount archivos - $formattedTotalGB GB</span></div>"

  $controls = @"
<div class="controls">
  <input id="q" type="text" placeholder="Filtrar por nombre o carpeta...">
  <button id="clr" class="btn">Limpiar</button>
  <span id="count" class="small muted"></span>
</div>
"@

  $tableHead = @"
<table id="tbl">
  <thead>
    <tr>
      <th class="sticky">Drive</th>
      <th class="sticky">Folder</th>
      <th class="sticky">Name</th>
      <th class="sticky">Ext</th>
      <th class="sticky right">MB</th>
      <th class="sticky">LastWrite</th>
      <th class="sticky path">Path</th>
    </tr>
  </thead>
  <tbody>
"@

  $rows = New-Object System.Text.StringBuilder
  foreach ($row in $files) {
    $drive  = HtmlEnc($row.Drive)
    $folder = HtmlEnc($row.Folder)
    $name   = HtmlEnc($row.Name)
    $ext    = HtmlEnc($row.Extension)
    $mb     = [string]::Format('{0:n2}', $row.MB)
    $dtISO  = Get-Date $row.LastWrite -Format 'yyyy-MM-dd HH:mm:ss'
    $path   = HtmlEnc($row.FullPath)
    $href   = 'file:///' + ($row.FullPath -replace '\\','/')

    $null = $rows.AppendLine('<tr>'+
      '<td>'+ $drive +'</td>'+
      '<td>'+ $folder +'</td>'+
      '<td>'+ $name +'</td>'+
      '<td>'+ $ext +'</td>'+
      '<td class="right">'+ $mb +'</td>'+
      '<td>'+ $dtISO +'</td>'+
      '<td class="path"><code>'+ $path +'</code> &nbsp; <a href="'+ $href +'" target="_blank" rel="noopener">Abrir</a></td>'+
    '</tr>')
  }

  $tableTail = @"
  </tbody>
</table>
<script>
(function(){
  const tbody = document.querySelector('#tbl tbody');
  const heads = document.querySelectorAll('#tbl thead th');
  heads.forEach((th, idx) => {
    th.addEventListener('click', () => {
      const asc = !(th.dataset.asc === 'true');
      heads.forEach(h=>{ if(h!==th) h.removeAttribute('data-asc'); });
      th.dataset.asc = asc ? 'true' : 'false';
      const rows = Array.from(tbody.rows);
      rows.sort((a,b)=>{
        const A = a.cells[idx].innerText.trim();
        const B = b.cells[idx].innerText.trim();
        return A.localeCompare(B, undefined, {numeric:true}) * (asc?1:-1);
      });
      rows.forEach(r => tbody.appendChild(r));
    });
  });

  const q = document.getElementById('q');
  const clr = document.getElementById('clr');
  const count = document.getElementById('count');
  const allRows = Array.from(tbody.rows);
  function apply(){
    const val = (q.value||'').toLowerCase();
    let visible = 0;
    allRows.forEach(r=>{
      const folder = r.cells[1].innerText.toLowerCase();
      const name   = r.cells[2].innerText.toLowerCase();
      const ok = (!val) || folder.includes(val) || name.includes(val);
      r.style.display = ok ? '' : 'none';
      if(ok) visible++;
    });
    count.textContent = visible + ' / ' + allRows.length + ' filas';
  }
  q.addEventListener('input', apply);
  clr.addEventListener('click', ()=>{ q.value=''; apply(); });
  apply();
})();
</script>
"@

  $end = '</body></html>'

  $fullHtml = $head + $intro + $chips + $controls + $tableHead + $rows.ToString() + $tableTail + $end
  $fullHtml | Set-Content -Path $outputPath -Encoding UTF8
  Write-Host "Inventario generado en: $outputPath"

  if ($docsTargetPath) {
    Copy-Item -LiteralPath $outputPath -Destination $docsTargetPath -Force
    Write-Host "Copiado a: $docsTargetPath"
  }

  if ($Push) {
    $git = Get-Command git -ErrorAction Stop
    $targets = @($outputPath)
    if ($docsTargetPath) { $targets += $docsTargetPath }
    $relative = @()
    foreach ($target in ($targets | Sort-Object -Unique)) {
      if (Test-Path $target) {
        $relative += (Resolve-Path -LiteralPath $target -Relative)
      }
    }
    foreach ($item in $relative) {
      & $git.Source add -- $item
    }
    $status = (& $git.Source status --short)
    if (-not $status) {
      Write-Host 'No hay cambios para commitear.'
    } else {
      & $git.Source commit -m $CommitMessage | Out-Null
      & $git.Source push
      Write-Host 'Cambios enviados a remoto.'
    }
  }
}
finally {
  Pop-Location
}

